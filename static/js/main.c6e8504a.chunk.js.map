{"version":3,"sources":["components/pokeheader.js","components/pokefilter.js","components/pokelist.js","components/pokedisplay.js","serviceWorker.js","index.js","App.js"],"names":["Header","react_default","a","createElement","className","PokeFilter","observer","props","state","data_types","types_list","value","results","map","item","index","url","key","id","name","filter","placeholder","onChange","e","filter_handle","select_type","PokeList","list","data","isTypeSelected","filteredPokemons","onClick","take_url","pokemon","listOptions","PokeDisplay","data_display","species","abilities","ability","weight","height","avatar1","src","sprites","front_default","alt","avatar2","front_female","Boolean","window","location","hostname","match","ReactDOM","render","getJson","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","api_url","wrap","_context","prev","next","fetch","concat","sent","json","abrupt","stop","_x","apply","this","arguments","useObservable","type_url","fromPromise","undefined","pokemons_list","pokemon_url","setData","type","limit","offset","pokeheader","pokefilter","target","selectedIndex","getAttribute","pokelist","move","count","fil","dat","filterate","RegExp","test","pokedisplay","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6e8504a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => (\r\n\t<div className=\"header\">\r\n\t\t<h2>Pokedex App</h2>\r\n\t\t<h5>listing of the pokemons</h5>\r\n\t</div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst PokeFilter = observer(props => {\r\n\tif (props.state.data_types.state === \"fulfilled\") {\r\n\t\tconst types_list = props.state.data_types.value.results.map(\r\n\t\t\t(item, index) => (\r\n\t\t\t\t<option value={item.url} key={index} id={index}>\r\n\t\t\t\t\t{item.name}\r\n\t\t\t\t</option>\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t<div className=\"filter\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={props.state.filter}\r\n\t\t\t\t\tplaceholder=\"Search\"\r\n\t\t\t\t\tonChange={e => props.filter_handle(e)}\r\n\t\t\t\t/>\r\n\t\t\t\tType:\r\n\t\t\t\t<select onChange={e => props.select_type(e)}>\r\n\t\t\t\t\t<option value=\"https://pokeapi.co/api/v2/pokemon\" id={50}>\r\n\t\t\t\t\t\tall\r\n\t\t\t\t\t</option>\r\n\t\t\t\t\t{types_list}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\treturn null;\r\n});\r\n\r\nexport default PokeFilter;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst PokeList = observer(props => {\r\n\tvar list = <div />;\r\n\r\n\tif (props.state.data.state === \"fulfilled\") {\r\n\t\tif (!props.state.isTypeSelected && !props.state.filter) {\r\n\t\t\tlist = props.state.data.value.results.map((item, index) => (\r\n\t\t\t\t<p onClick={e => props.take_url(e)} id={item.url} key={index}>\r\n\t\t\t\t\t{item.name}\r\n\t\t\t\t</p>\r\n\t\t\t));\r\n\t\t} else if (!props.state.isTypeSelected && props.state.filter) {\r\n\t\t\tlist = props\r\n\t\t\t\t.filteredPokemons(props.state.filter, props.state.data)\r\n\t\t\t\t.map((item, index) => (\r\n\t\t\t\t\t<p\r\n\t\t\t\t\t\tonClick={e => props.take_url(e)}\r\n\t\t\t\t\t\tid={item.url}\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{item.name}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t));\r\n\t\t} else {\r\n\t\t\tlist = props.state.data.value.pokemon.map((item, index) => (\r\n\t\t\t\t<p\r\n\t\t\t\t\tonClick={e => props.take_url(e)}\r\n\t\t\t\t\tid={item.pokemon.url}\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t>\r\n\t\t\t\t\t{item.pokemon.name}\r\n\t\t\t\t</p>\r\n\t\t\t));\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"list\">\r\n\t\t\t<div className=\"pokemons\">{list}</div>\r\n\t\t\t<div className=\"buttons\">\r\n\t\t\t\t<button onClick={e => props.listOptions(-1, 0)}>\r\n\t\t\t\t\tprevious\r\n\t\t\t\t</button>\r\n\t\t\t\t<button onClick={e => props.listOptions(1, 0)}>next</button>\r\n\t\t\t\t<br />\r\n\t\t\t\t<button onClick={e => props.listOptions(0, 10)}>10</button>\r\n\t\t\t\t<button onClick={e => props.listOptions(0, 20)}>20</button>\r\n\t\t\t\t<button onClick={e => props.listOptions(0, 50)}>50</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n});\r\n\r\nexport default PokeList;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst PokeDisplay = observer(props => {\r\n\tif (props.state.data_display.state === \"fulfilled\") {\r\n\t\tconst name = props.state.data_display.value.species.name;\r\n\r\n\t\tconst abilities = props.state.data_display.value.abilities.map(\r\n\t\t\t(item, index) => (\r\n\t\t\t\t<li value={item.ability.url} key={index}>\r\n\t\t\t\t\t{item.ability.name}\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tconst weight = props.state.data_display.value.weight;\r\n\t\tconst height = props.state.data_display.value.height;\r\n\t\tconst avatar1 = (\r\n\t\t\t<img\r\n\t\t\t\tsrc={props.state.data_display.value.sprites.front_default}\r\n\t\t\t\talt=\"\"\r\n\t\t\t/>\r\n\t\t);\r\n\t\tconst avatar2 = (\r\n\t\t\t<img\r\n\t\t\t\tsrc={props.state.data_display.value.sprites.front_female}\r\n\t\t\t\talt=\"\"\r\n\t\t\t/>\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"disp\">\r\n\t\t\t\t<div className=\"infobox\">\r\n\t\t\t\t\t<p>Name: {name}</p>\r\n\t\t\t\t\t<p>Abilities:</p>\r\n\t\t\t\t\t<ul>{abilities}</ul>\r\n\t\t\t\t\t<p>Height: {height}</p>\r\n\t\t\t\t\t<p>Weight: {weight}</p>\r\n\t\t\t\t\t{avatar1}\r\n\t\t\t\t\t{avatar2}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"disp\">\r\n\t\t\t<div className=\"infobox\">\r\n\t\t\t\t<div className=\"placehold\">sex and hunger rule the world!</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n});\r\n\r\nexport default PokeDisplay;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from \"react\";\nimport { fromPromise } from \"mobx-utils\";\nimport { useObservable } from \"mobx-react-lite\";\n\nimport \"./App.scss\";\n\nimport Header from \"./components/pokeheader\";\nimport Filter from \"./components/pokefilter\";\nimport List from \"./components/pokelist\";\nimport Disp from \"./components/pokedisplay\";\n\nexport default function pokeStore() {\n\tconst getJson = async url => {\n\t\tconst api_url = await fetch(`${url}`);\n\t\tconst data = await api_url.json();\n\t\treturn data;\n\t};\n\n\tconst state = useObservable({\n\t\ttype_url: \"https://pokeapi.co/api/v2/pokemon\",\n\t\tfilter: \"\",\n\t\tdata: fromPromise(getJson(\"https://pokeapi.co/api/v2/pokemon\")),\n\t\tdata_types: fromPromise(getJson(\"https://pokeapi.co/api/v2/type\")),\n\t\tdata_display: fromPromise(getJson(undefined)),\n\t\tpokemons_list: undefined,\n\t\tpokemon_url: undefined,\n\t\tisTypeSelected: false\n\t});\n\n\tfunction setData(type) {\n\t\tstate.data = fromPromise(getJson(type));\n\t}\n\n\tfunction filteredPokemons(fil, dat) {\n\t\tvar filterate = new RegExp(fil, \"i\");\n\t\treturn dat.value.results.filter(\n\t\t\titem => !fil || filterate.test(item.name)\n\t\t);\n\t}\n\n\tvar limit = 10;\n\tvar offset = 0;\n\tfunction listOptions(move, count) {\n\t\tif (!state.isTypeSelected) {\n\t\t\tif (count > 0) limit = count;\n\t\t\tif (move === 1) offset += limit;\n\t\t\tif (move === -1) offset -= limit;\n\t\t\tif (offset < 0) offset = 0;\n\n\t\t\tsetData(\n\t\t\t\t`https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}`\n\t\t\t);\n\t\t}\n\t}\n\n\tvar filter_handle = e => {\n\t\tstate.filter = e.target.value;\n\t\tif (state.filter) {\n\t\t\tif (!state.isTypeSelected) {\n\t\t\t\tsetData(\"https://pokeapi.co/api/v2/pokemon?offset=0&limit=964\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (!state.isTypeSelected) {\n\t\t\t\tsetData(\"https://pokeapi.co/api/v2/pokemon\");\n\t\t\t}\n\t\t}\n\t};\n\n\tconst select_type = e => {\n\t\tvar key = e.target[e.target.selectedIndex].getAttribute(\"id\");\n\t\tif (key == 50) {\n\t\t\tstate.isTypeSelected = false;\n\t\t} else {\n\t\t\tstate.isTypeSelected = true;\n\t\t}\n\n\t\tstate.data = fromPromise(getJson(e.target.value));\n\t};\n\n\tconst take_url = e => {\n\t\tstate.data_display = fromPromise(getJson(e.target.id));\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<Filter\n\t\t\t\tstate={state}\n\t\t\t\tselect_type={select_type}\n\t\t\t\tfilter_handle={filter_handle}\n\t\t\t/>\n\t\t\t<div className=\"menu\">\n\t\t\t\t<List\n\t\t\t\t\tstate={state}\n\t\t\t\t\tlistOptions={listOptions}\n\t\t\t\t\ttake_url={take_url}\n\t\t\t\t\tfilteredPokemons={filteredPokemons}\n\t\t\t\t/>\n\t\t\t\t<Disp state={state} />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n"],"sourceRoot":""}